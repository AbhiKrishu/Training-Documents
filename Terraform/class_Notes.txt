		
#########################
Day - 12 - 8th Nov. 2023
#########################
				
		
	IAC --> Fundamentals of Terraform ::
	
		-- > Terraform is a IAC tools used for Provisioning/Creating the servers.
		
			Terraform is Opensource IAC tools
			It is used to work with any target environment
			
		Terraform ::
		
			Identify the scope(Target Environment)
			Write the terraform script (*.tf)
			terraform init 		-- initialize terraform provider for that target environment 
			terraform plan      -- review/ validate the terraform script.
			terraform apply		-- implement the actual change in target environment 
			
		
		1. Install Terraform 			https://developer.hashicorp.com/terraform/downloads
				Download terraform terraform - package(*.zip)
				Extract
				Create Environment Variable to access terraform.
				
		2. Create Terraform Scripts 
				Visual Studio Code			--> Install VSCode in Local Machine. 				https://code.visualstudio.com/download
					Install Terraform Extensions and create *.tf.
		3. Create Terraform Scripts
		
		
			Using Terraform :::
			
				--> Create/Add Resource			+
				--> Delete/Destroy Resource 	-
				--> Update/Change Resource 		~
				
		4. Create Access Key & Secret Key.
		
#########################
Day - 13 - 9th Nov. 2023
#########################
						
		
		Create AWS EC2-Instance using Terraform.
		
			- ami 
			- key-pair 
			
			
		terraform init 			==> Should the one time activity for a specific project.
		
		terraform plan 
		
		terraform apply 
		
		terraform destroy 
		
		
		
		Build/Release Cycle 
			
			Environments - Build/Test-QA/UAT/PRE-PROD 			===> PROD.
			
		Jenkins CICD Pipeline :
		
			SCM_Checkout ---> Build ---> Deploy_to_QA
			
			
		Adhoc / Bug-fix /
		
			DEV/BUILD/TEST Environments
			
		DevOps --> 
		
		Scenario 1: creating test servers
			Pipeline1 : Upstream Job 
				
					SCM_Checkout ---> Provision_Server(Terraform)	---> Config_Server(Ansible)
					
			Pipeline2 : Downstream Job
			
				SCM_Checkout ---> Build ---> Deploy_to_QA
				
		Scenario 2: creating test servers
		
			SCM_Checkout ---> Appln_Build ---> Provision_Server(Terraform)	---> Config_Server(Ansible) ---> Deploy_to_QA ---> Automate QA_Testing --> Destroy_QA_Server
			
																																		|
																																		|
																																		
																																Notify the Users
			
		Scenario 2: creating test servers
		
			SCM_Checkout ---> Appln_Build ---> Provision_Server(Terraform)	---> Config_Server(Ansible) ---> Deploy_to_QA ---> Automate QA_Testing --> Destroy_QA_Server
			
			
			QA			--> Testing  
			UAT 		--> testing 
			
		Pipeline ::	
			SCM_Checkout
			Appln_Build
			
			Provision_QA_Server(Terraform)	---> Config_Server(Ansible)
			Deploy_to_QA
			Automate QA_Testing  ---> Notify the Users
			Destroy_QA_Server
			
			(Upon_Successful QA_testing) 
			Provision_UAT_Server(Terraform)	---> Config_Server(Ansible)
			Deploy_to_UAT
			Automate UAT_Testing  ---> Notify the Users
			Destroy_UAT_Server			
			
			(Upon_Successful UAT_testing)			
			Deploy_to_PROD
			
			
		waterfall ==> Agile ==> DevOps ==> DevSecOps ==> SRE ==> GitOps ==> MLOps ==> AIOps,............... 
						
			
Next :
		Docker 
					
